<!-- <!doctype html>
<html class="no-js" lang="en">


<!-- Mirrored from htmldemo.net/toro/toro/cart.html by HTTrack Website Copier/3.x [XR&CO'2014], Sat, 02 Mar 2024 15:22:33 GMT -->
<head>
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <title>Toro - Minimal eCommerce HTML Template</title>
    <meta name="robots" content="noindex, follow" />
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <!-- Favicon -->
    <link rel="shortcut icon" type="image/x-icon" href="/asset/images/favicon.png">

    <!-- All CSS is here
	============================================ -->

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="/asset/css/vendor/bootstrap.min.css">
    <!-- Icon Font CSS -->
    <link rel="stylesheet" href="/asset/css/vendor/font-awesome.css">
    <link rel="stylesheet" href="/asset/css/vendor/dlicon.css">
    <!-- Others CSS -->
    <link rel="stylesheet" href="/asset/css/plugins/owl-carousel.css">
    <link rel="stylesheet" href="/asset/css/plugins/slick.css">
    <link rel="stylesheet" href="/asset/css/plugins/magnific-popup.css">
    <link rel="stylesheet" href="/asset/css/plugins/jarallax.css">
    <link rel="stylesheet" href="/asset/css/plugins/easyzoom.css">
    <link rel="stylesheet" href="/asset/css/plugins/animate.css">
    <link rel="stylesheet" href="/asset/css/plugins/fullpage.css">
    <link rel="stylesheet" href="/asset/css/plugins/jquery-ui.css">
    <link rel="stylesheet" href="/asset/css/plugins/select2.min.css">
    <link rel="stylesheet" href="/asset/css/style.css">
<!-- 
</head>
<body>

    <div class="product-details-quality quality-width-cart">
        <div onclick="qtyControl(this,'<%=value.productId._id%>')" class="cart-plus-minus ">
            <input class="cart-plus-minus-box" type="text" min=1 max="<%=value.productId.Quantity %>"
                value="<%=value.quantity %>">

        </div>
    </div>
</body> --> -->


const razor = async (req, res) => {
    try {
        const user = await User.findOne({ _id: req.body.userId })
        const amount = req.body.amount * 100
        const options = {
            amount,
            currency: "INR",
            receipt: 'muhammedmhdt@gmail.com'
        }
        instance.orders.create(options, (err, order) => {
            if (!err) {
                res.send({
                    succes: true,
                    msg: 'ORDER created',
                    order_id: order.id,
                    amount,
                    key_id: process.env.RAZORPAY_IDKEY,
                    name: user.name,
                    email: user.email
                })
            } else {
                console.error("Error creating order:", err);
                res.status(500).send({ success: false, msg: "Failed to create order" });
            }
        })
    } catch (err) {
        console.log(err.message + ' razor')
    }
}





function submit1(amount, userId){
    const Radio = document.querySelector('input[name="peyment"]:checked');

    console.log(Radio);
    if(Radio.value=='Cash on Delivery'){
        
        form.submit()
    }else{
        razor(amount,userId)
    }
}

function razor(amount, userId) {
    console.log(amount);
    fetch('/razor', {
        method: 'POST',
        headers: { 'Content-type': 'application/json' },
        body: JSON.stringify({ amount, userId })
    }).then(res => res.json()).then(data => {
        if (data.succes) {
            console.log(data)
            let options = {
                "key": ${data.key_id},
                "amount": ${data.amount},
                "currency": "INR",
                "name": "slayFIt",
                "order_id": ${data.order_id},
                "handler": function (response) {
                    form.submit();

                },
                "profile": {
                    "name": ${data.name},
                    "email": ${data.email}
                }
            }

            let razorpayObject = new Razorpay(options);
            razorpayObject.on('payment.failed', (response) => {
                alert('payment failed');
            });
            razorpayObject.open();
        }
    })
}





//                 const Toast = Swal.mixin({
    //         toast: true,
    //         position: "bottom",
    //         showConfirmButton: false,
    //         timer: 3000,
    //          timerProgressBar: true,
    //          didOpen: (toast) => {
    //         toast.onmouseenter = Swal.stopTimer;
    //         toast.onmouseleave = Swal.resumeTimer;
    //   }
    // });
    // Toast.fire({
    //   text: 'Provide a valid delivery address'
    // });











from my page----------






    
function Submit(amount, userId){
    
    var total = document.getElementById("totalSpan").innerText;
    var gTotal = total.replace("â‚¹", "").replace(".00", "");
    console.log(gTotal)
    var grandTotal = gTotal



          const Radio = document.querySelector('input[name="payment"]:checked');

          if(Radio.value=='Cash on Delivery'){
              form.submit()
          }else{
              razor(amount,userId)
          }
      }

      function razor(amount, userId) {
        console.log(amount, userId,'kkkkkooooooo')

          fetch('/razorPay', {
              method: 'POST',
              headers: { 'Content-type': 'application/json' },
              body: JSON.stringify({ amount: amount, userId: userId })
          }).then(res => res.json()).then(data => {
              if (data.succes) {
                  console.log(data)
                  let options = {
                      "key": `${data.key_id}`,
                      "amount":` ${data.amount}`,
                      "currency": "INR",
                      "name": "TORO",
                      "order_id": `${data.order_id}`,
                      "handler": function (response) {
                          form.submit();

                      },
                      "profile": {
                          "name": `${data.FullName}`,
                          "email": `${data.email}`
                      }
                  }

                  let razorpayObject = new Razorpay(options);
                  razorpayObject.on('payment.failed', (response) => {
                      alert('payment failed');
                  });
                  razorpayObject.open();
              }else if(data.fail){

                const Toast = Swal.mixin({
        toast: true,
        position: "bottom",
        showConfirmButton: false,
        timer: 3000,
         didOpen: (toast) => {
        toast.onmouseenter = Swal.stopTimer;
        toast.onmouseleave = Swal.resumeTimer;
  }
});
Toast.fire({
  text: "Provide a valid delivery address"
});
              }
          })
      }







      const razorPay = async (req, res) => {
        try {
            console.log(req.body,'req.body');
            const address=await Address.findOne({UserId:req.session.user})
            if(address.address.length>0){
            const user = await User.findOne({_id: req.body.userId})
            const amount = req.body.amount * 100
            console.log(amount,'amount');
            const options = {
                amount,
                currency: "INR",
                receipt: 'sahlathasnim2002@gmail.com'
            }
            console.log(options,'options');
            instance.orders.create(options, (err, order) => {
                if (!err) {
                    res.send({
                        succes: true,
                        msg: 'ORDER created',
                        order_id: order.id,
                        amount,
                        key_id: process.env.RAZORPAY_IDKEY,
                        name: user.FullName,
                        email: user.email
                    })
                } else {
                    console.error("Error creating order:", err);
                    res.status(500).send({ success: false, msg: "Failed to create order" });
                }
            })
        }else{
            res.send({fail:true})
        }
        } catch (err) {
            console.log(err.message + ' razor')
        }
    }
    const {name,description,date,percentage,offerType,offerTypeName}=req.body


    const offerData = new offerSchema({
        name: name,
        description: description,
        percentage: percentage,
        expiredAt: date,
        offerType:offerTypeName,
        product: offerTypeName === 'Product' ? offerType : undefined,
        category: offerTypeName === 'Category' ? offerType : undefined
    });
     await offerData.save()
}


<select class="form-select d-inline-block" name="offerTypeName" id="offerType">
    <option>select</option>
    <option>Product</option>
    <option>Category</option>
</select>


<div class="col-md-6 mb-3" id="category" hidden>
    <label for="product_sku" class="form-label">Categories</label>
    <div class="ms-auto text-md-end">
        <select class="form-select" name="offerType" id="categorySelect">
            <% categoryData.forEach(element => {  %>
                <option value="<%= element._id %>"><%= element.name %></option>
            <% }); %>
        </select>
    </div>
</div>
<div class="col-md-6 mb-3" id="productsDiv" hidden>
    <label for="product_sku" class="form-label">Products</label>
    <div class="ms-auto text-md-end">
        <select class="form-select" name="offerType" id="productSelect">
            <% productData.forEach(element => {  %>
                <option value="<%= element._id %>"><%= element.name %></option>
            <% }); %>
        </select>
    </div>
</div>















<div class="col-md-6 mb-3" id="category" hidden>
    <label for="product_sku" class="form-label">Categories</label>
    <div class="ms-auto text-md-end">
        <select class="form-select" name="offerType" id="categorySelect">
            <% category.forEach(cat => {  %>
                <option value="<%= cat._id %>"><%= cat.CategoryName %></option>
            <% }); %>
        </select>
    </div>
</div>
<div class="col-md-6 mb-3" id="productsDiv" hidden>
    <label for="product_sku" class="form-label">Products</label>
    <div class="ms-auto text-md-end">
        <select class="form-select" name="offerType" id="productSelect">
            <% product.forEach(prod => {  %>
                <option value="<%= prod._id %>"><%= prod.Name %></option>
            <% }); %>
        </select>
    </div>
</div>