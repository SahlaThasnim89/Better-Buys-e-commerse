<%- include('../layouts/userHeader') %>
<body>
    <div class="login-register-area pt-95 pb-100">
        <div class="container-fluid" style="background-color: #f9f6f5;">
            <div class="row d-flex justify-content-center">
                <div class="col-lg-4 col-md-4 border border-secondary p-5" style="background-color: white;">
                    <div class="login-register-wrap">
                        <h3 class="d-flex justify-content-center"><i class="fa fa-user-o"></i> OTP Verification</h3>
                        <br>
                        <div class="login-register-form">
                            <form action="/otp" method="post">
                                <div class="sin-login-register">
                                    <label class="d-flex justify-content-center">Enter OTP Code <span>*</span></label>
                                    <br>
                                    <div class="input-field d-flex colo">
                                        <input class="m-2" name="digit1" type="number" required />
                                        <input class="m-2" name="digit2" type="number" required disabled />
                                        <input class="m-2" name="digit3" type="number"  required disabled/>
                                        <input class="m-2" name="digit4" type="number" required disabled />
                                    </div>
                                </div>
                                <div class="text-danger d-flex justify-content-center">
                                    <%=locals.msg%>
                                    </div>
                                <div class="d-flex justify-content-center" id="otpTimer"></div>
                                


                                <div class="d-flex justify-content-center" id="resendButtonContainer" style="display: none;">
                                    <br><br>
                                    <h5>Did'nt get the otp? <a href="/resendOtp" id="resendButton" onclick="resendOTP()">Resend</a></h5>
                                </div>
                                <br>
                                <div class="login-register-btn-remember d-flex justify-content-center">
                                    <div class="login-register-btn">
                                        <div class="d-flex justify-content-center">
                                        <button type="submit">Verify OTP</button>
                                       
                                    </div>
                                        
                                    </div>
                                </div>
                                <br>
                            
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div> 


    <style>

        .colo>input{
        text-align: center;
        }
        
        input[type="number"]::-webkit-inner-spin-button,
        input[type="number"]::-webkit-outer-spin-button {
            display: none;
        }
        </style>    

<script>
 

 const inputs = document.querySelectorAll("input"),
    button = document.querySelector("button");

    // iterate over all inputs
    inputs.forEach((input, index1) => {
        input.addEventListener("keyup", (e) => {
            // This code gets the current input element and stores it in the currentInput variable
            // This code gets the next sibling element of the current input element and stores it in the nextInput variable
            // This code gets the previous sibling element of the current input element and stores it in the prevInput variable
            const currentInput = input,
            nextInput = input.nextElementSibling,
            prevInput = input.previousElementSibling;

            // if the value has more than one character then clear it
            if (currentInput.value.length > 1) {
                currentInput.value = "";
                return;
            }
            // if the next input is disabled and the current value is not empty
            //  enable the next input and focus on it
            if (nextInput && nextInput.hasAttribute("disabled") && currentInput.value !== "") {
                nextInput.removeAttribute("disabled");
                nextInput.focus();
            }

            // if the backspace key is pressed
            if (e.key === "Backspace") {
                // iterate over all inputs again
                inputs.forEach((input, index2) => {
                // if the index1 of the current input is less than or equal to the index2 of the input in the outer loop
                // and the previous element exists, set the disabled attribute on the input and focus on the previous element
                if (index1 <= index2 && prevInput) {
                        input.setAttribute("disabled", true);
                        input.value = "";
                        prevInput.focus();
                    }
                });
            }
            //if the fourth input( which index number is 3) is not empty and has not disable attribute then
            //add active class if not then remove the active class.
            if (!inputs[3].disabled && inputs[3].value !== "") {
                button.classList.add("active");
                return;
            }
            button.classList.remove("active");
        });
    });

    //focus the first input which index is 0 on window load
    window.addEventListener("load", () => inputs[0].focus());






function initTimer(durationInSeconds) {
    const display = document.querySelector('#otpTimer');
    startTimer(durationInSeconds, display);
    toggleResendButton(false);
}


function toggleResendButton(enabled) {
    const resendButton = document.getElementById('resendButton');
    resendButton.style.pointerEvents = enabled ? 'auto' : 'none';
}


function startTimer(duration, display) {
    let timer = duration, minutes, seconds;
    const intervalId = setInterval(function () {
        minutes = parseInt(timer / 60, 10);
        seconds = parseInt(timer % 60, 10);

        minutes = minutes < 10 ? '0' + minutes : minutes;
        seconds = seconds < 10 ? '0' + seconds : seconds;

        display.textContent = minutes + ':' + seconds;

        if (--timer < 0) {
            toggleResendButton(true);
            display.style.display = 'none'; 

  
            clearInterval(intervalId);
        }
    }, 1000);
}

// Function to resend OTP
function resendOTP() {
    toggleResendButton(false); 

    fetch('/resendOTP', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
    })
    .then(response => response.json())
    .then(data => {
        console.log(data);

        initTimer(60);
    })
    .catch(error => {
        console.error('Error:', error);
        toggleResendButton(true); 
    });
}


document.addEventListener('DOMContentLoaded', function () {
    initTimer(60); 
});



</script>








</body>
